


import numpy as np


"""
	Defines the basis dependance cross corrolations to be done for density matrix experiment.
"""

measurements = [
   [0, 0, 0, 0],
   [0, 0, np.pi/4, 0],
   [np.pi/4, 0, np.pi/4, 0],
   [np.pi/4, 0, 0, 0],
   [0, np.pi/4, 0, 0],
   [0, np.pi/4, np.pi/4, 0],
   [np.pi/8, np.pi/4, np.pi/4, 0],
   [np.pi/8, np.pi/4, 0, 0],
   [np.pi/8, np.pi/4, 0, np.pi/4],
   [np.pi/8, np.pi/4, np.pi/8, np.pi/4],
   [0, np.pi/4, np.pi/8, np.pi/4],
   [0, 0, np.pi/8, np.pi/4],
   [np.pi/4, 0, np.pi/8, np.pi/4],
   [np.pi/4, 0, 0, -np.pi/4],
   [0, 0, 0, -np.pi/4],
   [0, np.pi/4, 0, -np.pi/4]
   ]



"""
	Defined M matrices for density matrix experiment.
	===========================
"""


M = 0.5*np.matrix([
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
	])



M1 = 0.5*np.matrix([
		[2,-1+1j,-1-1j,1],
		[-1-1j,0,1j,0],
		[-1+1j,-1j,0,0],
		[1,0,0,0],
	])



M2 = 0.5*np.matrix([
		[0,-1+1j,0,1],
		[-1-1j,2,1j,-1-1j],
		[0,-1j,0,0],
		[1,-1+1j,0,0],
	])



M3 = 0.5*np.matrix([
		[0,0,0,1],
		[0,0,1j,-1-1j],
		[0,-1j,0,-1+1j],
		[1,-1+1j,-1-1j,2],
	])



M4 = 0.5*np.matrix([
		[0,0,-1-1j,1],
		[0,0,1j,0],
		[-1+1j,-1j,2,-1+1j],
		[1,0,-1-1j,0],
	])



M5 = 0.5*np.matrix([
		[0,0,2j,-1-1j],
		[0,0,1-1j,0],
		[-2j,1+1j,0,0],
		[-1+1j,0,0,0],
	])



M6 = 0.5*np.matrix([
		[0,0,0,-1-1j],
		[0,0,1-1j,2j],
		[0,1+1j,0,0],
		[-1+1j,-2j,0,0],
	])



M7 = 0.5*np.matrix([
		[0,0,0,-1-1j],
		[0,0,-1+1j,2],
		[0,-1-1j,0,0],
		[-1+1j,2,0,0],
	])



M8 = 0.5*np.matrix([
		[0,0,2,-1-1j],
		[0,0,-1+1j,0],
		[2,-1-1j,0,0],
		[-1+1j,0,0,0],
	])



M9 = np.matrix([
		[0,0,0,1j],
		[0,0,-1j,0],
		[0,1j,0,0],
		[-1j,0,0,0],
	])



M10 = np.matrix([
		[0,0,0,1],
		[0,0,1,0],
		[0,1,0,0],
		[1,0,0,0],
	])



M11 = np.matrix([
		[0,0,0,1j],
		[0,0,1j,0],
		[0,-1j,0,0],
		[-1j,0,0,0],
	])



M12 = 0.5*np.matrix([
		[0,2,0,-1-1j],
		[2,0,-1-1j,0],
		[0,-1+1j,0,0],
		[-1+1j,0,0,0],
	])



M13 = 0.5*np.matrix([
		[0,0,0,-1-1j],
		[0,0,-1-1j,0],
		[0,-1+1j,0,2],
		[-1+1j,0,2,0],
	])



M14 = 0.5*np.matrix([
		[0,0,0,-1+1j],
		[0,0,1-1j,0],
		[0,1+1j,0,-2j],
		[-1-1j,0,2j,0],
	])



M15 = 0.5*np.matrix([
		[0,-2j,0,-1+1j],
		[2j,0,1-1j,0],
		[0,1+1j,0,0],
		[-1-1j,0,0,0],
	])



M16 = np.matrix([
		[0,0,0,1],
		[0,0,-1,0],
		[0,-1,0,0],
		[1,0,0,0],
	])

